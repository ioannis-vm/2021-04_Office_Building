:py:mod:`osmg.graphics.preprocessing_3d`
========================================

.. py:module:: osmg.graphics.preprocessing_3d

.. autoapi-nested-parse::

   The following utility functions are used for data visualization
   https://plotly.com/python/reference/



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   osmg.graphics.preprocessing_3d.add_data__nodes
   osmg.graphics.preprocessing_3d.add_data__parent_nodes
   osmg.graphics.preprocessing_3d.add_data__internal_nodes
   osmg.graphics.preprocessing_3d.add_data__release_nodes
   osmg.graphics.preprocessing_3d.add_data__frames
   osmg.graphics.preprocessing_3d.add_data__bars
   osmg.graphics.preprocessing_3d.add_data__twonodelinks
   osmg.graphics.preprocessing_3d.add_data__frame_offsets
   osmg.graphics.preprocessing_3d.add_data__frame_axes
   osmg.graphics.preprocessing_3d.add_data__zerolength_axes
   osmg.graphics.preprocessing_3d.add_data__global_axes
   osmg.graphics.preprocessing_3d.add_data__extruded_frames_mesh
   osmg.graphics.preprocessing_3d.add_data__extruded_bars_mesh
   osmg.graphics.preprocessing_3d.show



Attributes
~~~~~~~~~~

.. autoapisummary::

   osmg.graphics.preprocessing_3d.nparr


.. py:data:: nparr
   

   

.. py:function:: add_data__nodes(data_dict, mdl, load_case)

   Adds a trace containing nodes
   :param data_dict: list of dictionaries containing figure data
   :type data_dict: list[dict[str, object]]
   :param mdl: the model to be visualized
   :type mdl: Model
   :param load_case: the load_case to be visualized
   :type load_case: LoadCase


.. py:function:: add_data__parent_nodes(data_dict: list[dict[str, object]], load_case: osmg.load_case.LoadCase) -> None

   Adds a trace containing parent nodes
   :param data_dict: list of dictionaries containing figure data
   :type data_dict: list[dict[str, object]]
   :param mdl: the model to be visualized
   :type mdl: Model
   :param load_case: the load_case to be visualized
   :type load_case: LoadCase


.. py:function:: add_data__internal_nodes(data_dict: list[dict[str, object]], mdl: osmg.model.Model, load_case: Optional[osmg.load_case.LoadCase] = None) -> None

   Adds a trace containing internal nodes
   :param data_dict: list of dictionaries containing figure data
   :type data_dict: list[dict[str, object]]
   :param mdl: the model to be visualized
   :type mdl: Model
   :param load_case: the load_case to be visualized
   :type load_case: LoadCase


.. py:function:: add_data__release_nodes(data_dict: list[dict[str, object]], list_of_nodes: list[osmg.ops.node.Node]) -> None

   Adds a trace containing release nodes
   :param data_dict: list of dictionaries containing figure data
   :type data_dict: list[dict[str, object]]
   :param list_of_nodes: List of nodes where a release is present.
   :type list_of_nodes: list[Node]
   :param mdl: the model to be visualized
   :type mdl: Model
   :param load_case: the load_case to be visualized
   :type load_case: LoadCase


.. py:function:: add_data__frames(data_dict: list[dict[str, object]], mdl: osmg.model.Model, load_case: Optional[osmg.load_case.LoadCase] = None) -> None

   Adds a trace containing frame element centroidal axis lines
   :param data_dict: list of dictionaries containing figure data
   :type data_dict: list[dict[str, object]]
   :param mdl: the model to be visualized
   :type mdl: Model
   :param load_case: the load_case to be visualized
   :type load_case: LoadCase


.. py:function:: add_data__bars(data_dict: list[dict[str, object]], mdl: osmg.model.Model, load_case: Optional[osmg.load_case.LoadCase] = None) -> None

   Adds a trace containing frame element centroidal axis lines
   :param data_dict: dictionary containing figure data
   :type data_dict: dict
   :param mdl: the model to be visualized
   :type mdl: Model
   :param load_case: the load_case to be visualized
   :type load_case: LoadCase


.. py:function:: add_data__twonodelinks(data_dict, mdl)

   Adds a trace containing twonodelink elements
   :param data_dict: dictionary containing figure data
   :type data_dict: dict
   :param mdl: the model to be visualized
   :type mdl: Model


.. py:function:: add_data__frame_offsets(data_dict, mdl)

   Adds a trace containing frame element rigid offset lines
   :param data_dict: dictionary containing figure data
   :type data_dict: dict
   :param mdl: the model to be visualized
   :type mdl: Model


.. py:function:: add_data__frame_axes(data_dict, mdl, ref_len)

   Adds a trace containing frame element local axis lines
   :param data_dict: dictionary containing figure data
   :type data_dict: dict
   :param mdl: the model to be visualized
   :type mdl: Model
   :param ref_len: model reference length to scale the axes
   :type ref_len: float


.. py:function:: add_data__zerolength_axes(data_dict, mdl, ref_len)

   Adds a trace containing zerolength element local axis lines
   :param data_dict: dictionary containing figure data
   :type data_dict: dict
   :param mdl: the model to be visualized
   :type mdl: Model
   :param ref_len: model reference length to scale the axes
   :type ref_len: float


.. py:function:: add_data__global_axes(data_dict, ref_len)

   Adds a trace containing global axes
   :param data_dict: dictionary containing figure data
   :type data_dict: dict
   :param ref_len: model reference length to scale the axes
   :type ref_len: float


.. py:function:: add_data__extruded_frames_mesh(data_dict, mdl)

   Adds a trace containing frame element extrusion mesh
   :param data_dict: dictionary containing figure data
   :type data_dict: dict
   :param mdl: the model to be visualized
   :type mdl: Model


.. py:function:: add_data__extruded_bars_mesh(data_dict, mdl)

   Adds a trace containing frame element extrusion mesh
   :param data_dict: dictionary containing figure data
   :type data_dict: dict
   :param mdl: the model to be visualized
   :type mdl: Model


.. py:function:: show(mdl: osmg.model.Model, load_case: Optional[osmg.load_case.LoadCase] = None, extrude: bool = False, offsets: bool = True, global_axes: bool = True, parent_nodes: bool = True, frame_axes: bool = False, zerolength_axes: bool = False, camera: Optional[dict[str, object]] = None) -> None

   Visualize the model
   :param mdl: the model to be visualized
   :type mdl: Model
   :param load_case: the load_case to be visualized
   :type load_case: LoadCase
   :param extrude: wether to extrude frame elements
   :type extrude: bool
   :param offsets: whether to show frame element rigid offsets
   :type offsets: bool
   :param global_axes: whether to show global axes
   :type global_axes: bool
   :param diaphragm_lines: whether to show lines indicating rigid
                           diaphragm extent
   :type diaphragm_lines: bool
   :param tributary_areas: whether to show tributary area
                           boundaries
   :type tributary_areas: bool
   :param parent_nodes: whether to plot parent nodes
   :type parent_nodes: bool
   :param frame_axes: whether to show the local axes of frame
                      elements
   :type frame_axes: bool
   :param zerolength_axes: whether to show the local axes of
                           zerolength elements
   :type zerolength_axes: bool
   :param camera: custom positioning of the camera
   :type camera: dict


