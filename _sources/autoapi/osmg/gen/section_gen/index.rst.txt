:py:mod:`osmg.gen.section_gen`
==============================

.. py:module:: osmg.gen.section_gen

.. autoapi-nested-parse::

   Model Generator for OpenSees ~ section generator



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   osmg.gen.section_gen.SectionGenerator




Attributes
~~~~~~~~~~

.. autoapisummary::

   osmg.gen.section_gen.nparr


.. py:data:: nparr
   

   

.. py:class:: SectionGenerator

   Used to populate the section repository of a model.

   .. py:attribute:: model
      :annotation: :osmg.model.Model

      

   .. py:method:: generate_generic_elastic(name: str, e_times_a: float, e_times_i: float, g_times_j: float) -> osmg.ops.section.ElasticSection

      Generates an ElasticSection object with the specified properties.

      :param name: Name of the section.
      :type name: str
      :param e_times_a: The product of the elastic modulus and the area of the
                        section.
      :type e_times_a: float
      :param e_times_i: The product of the elastic modulus and the moment of
                        inertia.
      :type e_times_i: float
      :param g_times_j: The product of the shear modulus and the torsional
                        moment of inertia.
      :type g_times_j: float

      :returns:

                An ElasticSection object with the
                    specified properties.
      :rtype: ElasticSection

      .. rubric:: Example

      >>> from osmg.gen.section_gen import SectionGenerator
      >>> from osmg.model import Model
      >>> model = Model('test_model')
      >>> sec_gen = SectionGenerator(model)
      >>> sec = sec_gen.generate_generic_elastic(
      ...     name="My Elastic Section",
      ...     e_times_a=100.00, e_times_i=1000.00, g_times_j=500.00)
      >>> sec.name
      'My Elastic Section'
      >>> sec.area
      100.0
      >>> sec.i_y
      1000.0
      >>> sec.i_x
      1000.0
      >>> sec.j_mod
      500.0


   .. py:method:: load_aisc_from_database(sec_shape_designation: str, labels: list[str], ops_material: str, physical_material: str, sec_type: Type[osmg.ops.section.Section], store_in_model: bool = True, return_section: bool = False) -> dict[str, ElasticSection | FiberSection]

      Loads a section from the AISC steel section database.

      :param sec_shape_designation: Designation of the type of section
                                    to be loaded.
      :param labels: List of labels of the sections to be loaded.
      :param ops_material: Name of the uniaxial material to be
                           associated with the section.
      :param physical_material: Name of the physical material to be
                                associated with the section.
      :param sec_type: Type of section to be created.
      :param store_in_model: If True, the created sections are stored
                             in the model.
      :param return_section: If True, the created sections are returned.

      :returns: If `return_section` is True, a dictionary containing the
                created sections. The keys are the labels of the sections,
                and the values are the sections themselves.

      .. rubric:: Example

      >>> from osmg.gen.section_gen import SectionGenerator
      >>> from osmg.model import Model
      >>> from osmg.defaults import load_default_steel
      >>> from osmg.ops.section import ElasticSection
      >>> model = Model('test_model')
      >>> load_default_steel(model)
      >>> sec_gen = SectionGenerator(model)
      >>> sec_gen.load_aisc_from_database(
      ...     'W', ['W14X90'], 'default steel', 'default steel',
      ...     ElasticSection, store_in_model=True, return_section=True)
      {'W14X90': ElasticSection object
      name: W14X90
      uid: 0
      Properties:  E: 29000000.0
        A: 26.5
        Iy: 362.0
        Ix: 999.0
        G: 11153846.15
        J: 4.06
        W: 7.5
      outside_shape: specified
      snap_points: specified
      }



