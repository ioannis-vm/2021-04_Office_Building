:py:mod:`osmg.gen.component_gen`
================================

.. py:module:: osmg.gen.component_gen

.. autoapi-nested-parse::

   Model Generator for OpenSees ~ plain beamcolumn element generator



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   osmg.gen.component_gen.TrussBarGenerator
   osmg.gen.component_gen.BeamColumnGenerator



Functions
~~~~~~~~~

.. autoapisummary::

   osmg.gen.component_gen.retrieve_snap_pt_global_offset
   osmg.gen.component_gen.beam_placement_lookup
   osmg.gen.component_gen.look_for_panel_zone



Attributes
~~~~~~~~~~

.. autoapisummary::

   osmg.gen.component_gen.nparr


.. py:data:: nparr
   

   

.. py:function:: retrieve_snap_pt_global_offset(placement, section, p_i, p_j, angle)

   Returns the necessary offset to connect an element at a specified
   snap point of the section


.. py:function:: beam_placement_lookup(x_coord, y_coord, query, ndg, lvls, key, user_offset, section_offset, split_existing, snap)

   Performs lookup operations before placing a beam-functioning
   component assembly to determine how to connect it with
   respect to the other existing objects in the model.


.. py:function:: look_for_panel_zone(node: osmg.ops.node.Node, lvl: osmg.level.Level, query: osmg.gen.query.ElmQuery) -> osmg.ops.node.Node

   Determines if a panel zone joint component assembly is present
   at the specified node.


.. py:class:: TrussBarGenerator

   This object introduces bar elements to a model.
   Bar elements are linear elements that can only carry axial load.

   .. py:attribute:: model
      :annotation: :osmg.model.Model

      

   .. py:method:: add(xi_coord: float, yi_coord: float, lvl_key_i: int, offset_i: nparr, snap_i: str, xj_coord: float, yj_coord: float, lvl_key_j: int, offset_j: nparr, snap_j: str, transf_type: str, area: float, mat: osmg.ops.uniaxial_material.UniaxialMaterial, outside_shape: osmg.mesh.Mesh, weight_per_length: float = 0.0, split_existing_i: bool = None, split_existing_j: bool = None, component_purpose: str = 'Truss Element') -> osmg.component_assembly.ComponentAssembly

      Adds a truss bar element.
      If offsets are required, they are implemented through the
      addition of RigidLink elements.



.. py:class:: BeamColumnGenerator

   This object introduces beamcolumn elements to a model.

   .. py:attribute:: model
      :annotation: :osmg.model.Model

      

   .. py:method:: define_beamcolumn(assembly: osmg.component_assembly.ComponentAssembly, node_i: osmg.ops.node.Node, node_j: osmg.ops.node.Node, offset_i: nparr, offset_j: nparr, transf_type: str, section: ElasticSection | FiberSection, element_type: Type[Union[osmg.ops.element.ElasticBeamColumn, osmg.ops.element.DispBeamColumn]], angle: float = 0.0) -> ElasticBeamColumn | DispBeamColumn

      Adds a beamcolumn element to the model, connecting the
      specified nodes.


   .. py:method:: define_zerolength(assembly: osmg.component_assembly.ComponentAssembly, node_i: osmg.ops.node.Node, node_j: osmg.ops.node.Node, x_axis: nparr, y_axis: nparr, zerolength_gen: Callable, zerolength_gen_args: dict[str, object]) -> osmg.ops.element.ZeroLength

      Defines a zerolength element


   .. py:method:: define_two_node_link(assembly: osmg.component_assembly.ComponentAssembly, node_i: osmg.ops.node.Node, node_j: osmg.ops.node.Node, x_axis: nparr, y_axis: nparr, zerolength_gen: Callable, zerolength_gen_args: dict[str, object]) -> osmg.ops.element.TwoNodeLink

      Defines a TwoNodeLink element


   .. py:method:: add_beamcolumn_elements_in_series(component, node_i, node_j, eo_i, eo_j, n_sub, transf_type, section, element_type, angle, camber_2, camber_3)

      Adds beamcolumn elemens in series


   .. py:method:: generate_plain_component_assembly(component_purpose, lvl, node_i, node_j, n_sub, eo_i, eo_j, section, element_type, transf_type, angle, camber_2, camber_3)

      Generates a plain component assembly, with line elements in
      series


   .. py:method:: generate_hinged_component_assembly(component_purpose, lvl, node_i, node_j, n_sub, eo_i, eo_j, section, element_type, transf_type, angle, camber_2, camber_3, zerolength_gen_i, zerolength_gen_args_i, zerolength_gen_j, zerolength_gen_args_j)

      Defines a component assembly that is comprised of
      beamcolumn elements connected in series with nonlinear springs
      attached at the ends, followed by another sequence of
      beamcolumn elements (in order to be able to specify rigid offsets)


   .. py:method:: add_vertical_active(x_coord: float, y_coord: float, offset_i: nparr, offset_j: nparr, transf_type: str, n_sub: int, section: ElasticSection | FiberSection, element_type: Type[Union[osmg.ops.element.ElasticBeamColumn, osmg.ops.element.DispBeamColumn]], placement: str = 'centroid', angle: float = 0.0, camber_2: float = 0.0, camber_3: float = 0.0, method: str = 'generate_plain_component_assembly', additional_args: dict[str, object] = {}) -> dict[int, osmg.component_assembly.ComponentAssembly]

      Adds a vertical beamcolumn element to all active levels.  This
      method assumes that the levels are defined in order, from
      lowest to highest elevation, with consecutive ascending
      integer keys.


   .. py:method:: add_horizontal_active(xi_coord: float, yi_coord: float, xj_coord: float, yj_coord: float, offset_i: nparr, offset_j: nparr, snap_i: str, snap_j: str, transf_type: str, n_sub: int, section: osmg.ops.section.ElasticSection, element_type: Type[Union[osmg.ops.element.ElasticBeamColumn, osmg.ops.element.DispBeamColumn]], placement: str = 'centroid', angle: float = 0.0, camber_2: float = 0.0, camber_3: float = 0.0, split_existing_i: Optional[osmg.component_assembly.ComponentAssembly] = None, split_existing_j: Optional[osmg.component_assembly.ComponentAssembly] = None, method: str = 'generate_plain_component_assembly', additional_args: dict[str, object] = {}) -> dict[int, osmg.component_assembly.ComponentAssembly]

      Adds a diagonal beamcolumn element to all active levels.


   .. py:method:: add_diagonal_active(xi_coord: float, yi_coord: float, xj_coord: float, yj_coord: float, offset_i: nparr, offset_j: nparr, snap_i: str, snap_j: str, transf_type: str, n_sub: int, section: osmg.ops.section.ElasticSection, element_type: Type[Union[osmg.ops.element.ElasticBeamColumn, osmg.ops.element.DispBeamColumn]], placement: str = 'centroid', angle: float = 0.0, camber_2: float = 0.0, camber_3: float = 0.0, split_existing_i: bool = None, split_existing_j: bool = None, method: str = 'generate_plain_component_assembly', additional_args: dict[str, object] = {}) -> dict[int, osmg.component_assembly.ComponentAssembly]

      Adds a diagonal beamcolumn element to all active levels.


   .. py:method:: add_pz_active(x_coord: float, y_coord: float, section: osmg.ops.section.ElasticSection, physical_material: osmg.physical_material.PhysicalMaterial, angle: float, column_depth: float, beam_depth: float, pz_doubler_plate_thickness: float, pz_hardening: float, only_elastic: bool = False) -> dict[int, osmg.component_assembly.ComponentAssembly]

      Adds a component assembly representing a steel W-section
      panel zone joint.



