:py:mod:`osmg.gen.node_gen`
===========================

.. py:module:: osmg.gen.node_gen

.. autoapi-nested-parse::

   Model Generator for OpenSees ~ node generator



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   osmg.gen.node_gen.NodeGenerator




.. py:class:: NodeGenerator

   Introduces node objects to a model.

   .. py:attribute:: model
      :annotation: :osmg.gen.model.Model

      

   .. py:method:: add_node_lvl(x_loc: float, y_loc: float, lvl: int) -> osmg.ops.node.Node

      Adds a node at the specified coordinates and level.

      :param x_loc: x coordinate of the node.
      :param y_loc: y coordinate of the node.
      :param lvl: Level at which the node should be added.

      :returns: The node object that was added.

      .. rubric:: Example

      >>> from osmg.model import Model
      >>> from osmg.gen.node_gen import NodeGenerator
      >>> model = Model('test_model')
      >>> model.add_level(0, 0.00)
      >>> generator = NodeGenerator(model)
      >>> generator.add_node_lvl(2.00, 3.00, 0)
      Node object
        uid: 0
        coords: [2.0, 3.0, 0.0]
        restraint: [False, False, False, False, False, False]
      <BLANKLINE>


   .. py:method:: add_node_lvl_xyz(x_loc: float, y_loc: float, z_loc: float, lvl: int) -> osmg.ops.node.Node

      Adds a node at the specified coordinates and level having a
      custom elevation.

      :param x_loc: x coordinate of the node.
      :param y_loc: y coordinate of the node.
      :param z_loc: Elevation of the node.
      :param lvl: Level uid at which the node should be added.

      :returns: The node object that was added.

      .. rubric:: Example

      >>> from osmg.model import Model
      >>> from osmg.gen.node_gen import NodeGenerator
      >>> model = Model('test_model')
      >>> model.add_level(0, 0.00)
      >>> generator = NodeGenerator(model)
      >>> generator.add_node_lvl_xyz(2.00, 3.00, 4.00, 0)
      Node object
        uid: 0
        coords: [2.0, 3.0, 4.0]
        restraint: [False, False, False, False, False, False]
      <BLANKLINE>


   .. py:method:: add_node_active(x_loc, y_loc)

      Adds a node[/s] at the specified coordinates to all active levels.

      :param x_loc: x coordinate of the node[/s].
      :param y_loc: y coordinate of the node[/s].

      .. rubric:: Example

      >>> from osmg.model import Model
      >>> from osmg.gen.node_gen import NodeGenerator
      >>> model = Model('test_model')
      >>> model.add_level(0, 0.00)
      >>> model.add_level(1, 1.00)
      >>> model.add_level(2, 2.00)
      >>> model.levels.set_active([1, 2])
      >>> generator = NodeGenerator(model)
      >>> generator.add_node_active(2.00, 3.00)
      >>> model.levels[0].nodes.__srepr__()
      '[Collection of 0 items]'
      >>> model.levels[1].nodes.__srepr__()
      '[Collection of 1 items]'
      >>> model.levels[2].nodes.__srepr__()
      '[Collection of 1 items]'



