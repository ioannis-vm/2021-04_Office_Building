:py:mod:`osmg.common`
=====================

.. py:module:: osmg.common

.. autoapi-nested-parse::

   Common definitions



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   osmg.common.methods
   osmg.common.print_methods
   osmg.common.print_dir
   osmg.common.previous_element



Attributes
~~~~~~~~~~

.. autoapisummary::

   osmg.common.EPSILON
   osmg.common.ALPHA
   osmg.common.G_CONST_IMPERIAL
   osmg.common.G_CONST_SI
   osmg.common.STIFF_ROT
   osmg.common.STIFF
   osmg.common.TINY


.. py:data:: EPSILON
   :annotation: = 1e-06

   

.. py:data:: ALPHA
   :annotation: = 10000000.0

   

.. py:data:: G_CONST_IMPERIAL
   :annotation: = 386.22

   

.. py:data:: G_CONST_SI
   :annotation: = 9.81

   

.. py:data:: STIFF_ROT
   :annotation: = 1000000000000000.0

   

.. py:data:: STIFF
   :annotation: = 1000000000000000.0

   

.. py:data:: TINY
   :annotation: = 1e-12

   

.. py:function:: methods(obj: object) -> list[str]

   Returns the names of all methods of an object,
   excluding the dunder methods.

   .. rubric:: Examples

   >>> class TestClass:
   ...     def method_1(self):
   ...         pass
   ...
   ...     def method_2(self):
   ...         pass
   ...
   >>> obj = TestClass()
   >>> methods(obj)
   ['method_1', 'method_2']


.. py:function:: print_methods(obj: object) -> None

   Prints the methods of an object.


.. py:function:: print_dir(obj: object) -> None

   Prints the entire output of `dir()` of an object


.. py:function:: previous_element(dct: OrderedDict[Any, Any], key: Any) -> Optional[Any]

   Returns the value of the element that comes before the given key
   in an ordered dictionary.
   If the key is not in the dictionary, or if it is the first element
   in the dictionary, returns None.

   :param dct: An ordered dictionary.
   :param key: The key of the element whose previous element we want to
   :param find.:

   :returns: The value of the element that comes before the given key in
             the dictionary, or None if there is no such element.

   .. rubric:: Examples

   >>> dct = OrderedDict([(1, 'a'), (2, 'b'), (3, 'c')])
   >>> previous_element(dct, 2)  # Returns 'a'
   'a'
   >>> previous_element(dct, 3)  # Returns 'b'
   'b'
   >>> previous_element(dct, 1)  # Returns None

   >>> previous_element(dct, 4)  # Returns None


