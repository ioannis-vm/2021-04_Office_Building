:py:mod:`osmg.model`
====================

.. py:module:: osmg.model

.. autoapi-nested-parse::

   Model Generator for OpenSees ~ model



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   osmg.model.Settings
   osmg.model.Model



Functions
~~~~~~~~~

.. autoapisummary::

   osmg.model.transfer_component



Attributes
~~~~~~~~~~

.. autoapisummary::

   osmg.model.nparr


.. py:data:: nparr
   

   

.. py:function:: transfer_component(other: Model, component: osmg.component_assembly.ComponentAssembly) -> None

   Transfers a single component assembly from one model to
   another, assuming the other model was generated with the
   `initialize_empty_copy` method.


.. py:class:: Settings

   General customization of a model.
       imperial_units (bool):
           True for imperial <3:
               in, lb, lb/(in/s2)
           False for SI:
               m, N, kg
       ndm, ndf: change them to break the code.

   .. py:attribute:: imperial_units
      :annotation: :bool

      

   .. py:attribute:: ndm
      :annotation: :int

      

   .. py:attribute:: ndf
      :annotation: :int

      

   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: Model

   Model object.
   A model object is a representation of a structural model in
   OpenSees. It is the primary object of osmg.
   It contains levels, elastic sections, fiber sections,
   physical materials, and various collections of objects such as
   nodes, elements, and component assemblies that exist inside each level.
   Those objects are populated by generator objects. See `osmg.gen`.
   .. attribute:: name

      Name of the model.

      :type: str

   .. attribute:: levels

      Collection of levels in the model.

      :type: collections.CollectionActive[int, Level]

   .. attribute:: elastic_sections

      Collection of elastic sections in the model.

      :type: collections.Collection[int, ElasticSection]

   .. attribute:: fiber_sections

      Collection of fiber sections in the model.

      :type: collections.Collection[int, FiberSection]

   .. attribute:: uniaxial_materials

      Collection of uniaxial materials in the model.

      :type: collections.Collection[int, UniaxialMaterial]

   .. attribute:: physical_materials

      Collection of physical materials in the model.

      :type: collections.Collection[int, PhysicalMaterial]

   .. attribute:: uid_generator

      Object for generating unique IDs for objects in the model.

      :type: UIDGenerator

   .. attribute:: settings

      Settings for the model.

      :type: Settings

   .. py:attribute:: name
      :annotation: :str

      

   .. py:attribute:: levels
      :annotation: :osmg.collections.CollectionActive[int, osmg.level.Level]

      

   .. py:attribute:: elastic_sections
      :annotation: :osmg.collections.Collection[int, osmg.ops.section.ElasticSection]

      

   .. py:attribute:: fiber_sections
      :annotation: :osmg.collections.Collection[int, osmg.ops.section.FiberSection]

      

   .. py:attribute:: uniaxial_materials
      :annotation: :osmg.collections.Collection[int, osmg.ops.uniaxial_material.UniaxialMaterial]

      

   .. py:attribute:: physical_materials
      :annotation: :osmg.collections.Collection[int, osmg.physical_material.PhysicalMaterial]

      

   .. py:attribute:: uid_generator
      :annotation: :osmg.gen.uid_gen.UIDGenerator

      

   .. py:attribute:: settings
      :annotation: :Settings

      

   .. py:method:: __post_init__()


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: component_connectivity() -> dict[tuple[int, Ellipsis], osmg.component_assembly.ComponentAssembly]

      Returns the connectivity of all component
      assemblies. Component assemblies are collections of
      lower-level components that are connected to primary
      nodes. Each component assembly can be represented by a tuple
      of node uids of its connected nodes in ascending order. This
      method returns a dictionary having these tuples as keys, and
      the associated components as values.


   .. py:method:: add_level(uid: int, elevation: float) -> None

      Adds a level to the model.
      :param uid: Unique ID for the level.
      :type uid: int
      :param elevation: Elevation of the level.
      :type elevation: float

      .. rubric:: Example

      >>> from osmg.model import Model
      >>> model = Model('test_model')
      >>> model.add_level(1, 0.0)
      >>> model.levels.__srepr__()
      '[Collection of 1 items]'


   .. py:method:: dict_of_primary_nodes()

      Returns a dictionary of all the primary nodes in the model.
      The keys are the uids of the nodes.


   .. py:method:: list_of_primary_nodes()

      Returns a list of all the primary nodes in the model.


   .. py:method:: dict_of_internal_nodes()

      Returns a dictionary of all the internal nodes in the model.
      The keys are the uids of the nodes.


   .. py:method:: list_of_internal_nodes()

      Returns a list of all the internal nodes in the model.


   .. py:method:: dict_of_all_nodes()

      Returns a dictionary of all the nodes in the model.
      The keys are the uids of the nodes.


   .. py:method:: list_of_all_nodes()

      Returns a list of all the nodes in the model.


   .. py:method:: dict_of_components()

      Returns a dictionary of all the component assemblies in the
      model.
      The keys are the uids of the component assemblies.


   .. py:method:: list_of_components()

      Returns a list of all the component assembiles in the
      model.


   .. py:method:: dict_of_elements() -> dict[int, osmg.ops.element.Element]

      Returns a dictionary of all element objects in the model.
      The keys are the uids of the objects.


   .. py:method:: list_of_elements() -> list[osmg.ops.element.Element]

      Returns a list of all element objects in the model.


   .. py:method:: dict_of_specific_element(element_class: Type[osmg.ops.element.Element]) -> dict[int, osmg.ops.element.Element]

      Returns a dictionary of all element objects in the model of a
      particular element class.
      The keys are the uids of the objects.


   .. py:method:: list_of_specific_element(element_class: Type[osmg.ops.element.Element]) -> list[osmg.ops.element.Element]

      Returns a list of all element objects in the model of a
      particular element class.


   .. py:method:: bounding_box(padding: float) -> tuple[nparr, nparr]

      Returns the axis-aligned bouding box of the building


   .. py:method:: reference_length()

      Returns the largest dimension of the
      bounding box of the building
      (used in graphics)


   .. py:method:: initialize_empty_copy(name)

      Initializes a shallow empty copy of the model.
      Used to create subset models.


   .. py:method:: transfer_by_polygon_selection(other: Model, coords: nparr) -> None

      Uses `transfer_component` to transfer all components of which
      the projection to the XY plane falls inside the specified
      polygon.



