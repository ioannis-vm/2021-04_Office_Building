:py:mod:`osmg.preprocessing.tributary_area_analysis`
====================================================

.. py:module:: osmg.preprocessing.tributary_area_analysis

.. autoapi-nested-parse::

   Model Generator for OpenSees ~ tributary area analysis



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   osmg.preprocessing.tributary_area_analysis.PolygonLoad
   osmg.preprocessing.tributary_area_analysis.TributaryAreaAnalysisData
   osmg.preprocessing.tributary_area_analysis.TributaryAreaAnaysis




Attributes
~~~~~~~~~~

.. autoapisummary::

   osmg.preprocessing.tributary_area_analysis.nparr
   osmg.preprocessing.tributary_area_analysis.PolygonShape


.. py:data:: nparr
   

   

.. py:data:: PolygonShape
   

   

.. py:class:: PolygonLoad

   Polygonal loaded area

   .. py:attribute:: name
      :annotation: :str

      

   .. py:attribute:: value
      :annotation: :float

      

   .. py:attribute:: outside_shape
      :annotation: :Optional[PolygonShape]

      

   .. py:attribute:: holes
      :annotation: :Optional[list[PolygonShape]]

      

   .. py:attribute:: massless
      :annotation: :bool

      


.. py:class:: TributaryAreaAnalysisData

   Data generated by the tributary area analysis code

   .. py:attribute:: edges
      :annotation: :dict[int, osmg.mesh.Edge]

      

   .. py:attribute:: vertices
      :annotation: :dict[int, osmg.mesh.Vertex]

      

   .. py:attribute:: edge_map
      :annotation: :dict[int, Node | ElasticBeamColumn | DispBeamColumn]

      

   .. py:attribute:: edge_area
      :annotation: :dict[int, float]

      

   .. py:attribute:: edge_polygons
      :annotation: :dict[int, PolygonShape]

      

   .. py:attribute:: vertex_map
      :annotation: :dict[int, osmg.mesh.Vertex]

      

   .. py:attribute:: zn_map
      :annotation: :dict[int, int]

      

   .. py:attribute:: pz_node
      :annotation: :dict[int, dict[str, osmg.ops.node.Node]]

      


.. py:class:: TributaryAreaAnaysis

   Tributary area analysis object

   .. py:attribute:: parent_loadcase
      :annotation: :osmg.load_case.LoadCase

      

   .. py:attribute:: parent_level
      :annotation: :osmg.level.Level

      

   .. py:attribute:: polygon_loads
      :annotation: :list[PolygonLoad]

      

   .. py:attribute:: data
      :annotation: :TributaryAreaAnalysisData

      

   .. py:method:: run(load_factor=1.0, massless_load_factor=1.0, perform_checks=True)

      Performs tributary area analysis
      :param load_factor: Factor by which to multiply the surface
                          loads that count as a mass source, found in the load case.
      :type load_factor: float
      :param massless_load_factor: Factor by which to multiply
                                   the massless loads found in the load case.
      :type massless_load_factor: float
      :param perform_checks: Tributary area analysis works by
                             generating a mesh defined by the horizontal elements of
                             the floor plan and analyzing that mesh. The mesh should
                             not contain any edges that cross or overlap with other
                             edges. This can happen, for instance, if beam end offsets
                             have been accidentally misspecified causing beams to
                             overlap with or cross other members. The only shared
                             points between the edges should be the end vertices. By
                             default, we check if that is the case to avoid unexpected
                             behavior. This flag can be used to disable the checks for
                             subsequent analyses to enhance performance if that a prior
                             analysis has verified that the checks are satisfied.
      :type perform_checks: bool



