:py:mod:`osmg.load_case`
========================

.. py:module:: osmg.load_case

.. autoapi-nested-parse::

   Model Generator for OpenSees ~ load case



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   osmg.load_case.PointLoadMass
   osmg.load_case.LineElementUDL
   osmg.load_case.LoadCase




Attributes
~~~~~~~~~~

.. autoapisummary::

   osmg.load_case.nparr


.. py:data:: nparr
   

   

.. py:class:: PointLoadMass

   Point load/mass object. Global coordinate system.
   .. attribute:: val

      

      :type: nparr

   .. py:attribute:: val
      :annotation: :nparr

      

   .. py:method:: add(load: nparr) -> None

      Adds some quantity to the existing quantity.

      .. rubric:: Examples

      >>> from osmg.load_case import PointLoadMass
      >>> load = np.array([1., 2., 3., 4., 5., 6.])
      >>> point_load = PointLoadMass()
      >>> point_load.add(load)
      >>> point_load.val
      array([1., 2., 3., 4., 5., 6.])
      >>> point_load.add(load)
      >>> point_load.val
      array([ 2.,  4.,  6.,  8., 10., 12.])


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: LineElementUDL

   Line element uniformly distributed load object.

   .. py:attribute:: parent_load_case
      :annotation: :LoadCase

      

   .. py:attribute:: parent_line_element
      :annotation: :Union[osmg.ops.element.ElasticBeamColumn, osmg.ops.element.DispBeamColumn]

      

   .. py:attribute:: val
      :annotation: :nparr

      

   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: add_glob(udl: nparr) -> None

      Adds a uniformly distributed load
      to the existing udl
      The load is defined
      with respect to the global coordinate system
      of the building, and it is converted to the
      local coordinate system prior to adding it.
      :param udl: Array of size 3 containing
                  components of the uniformly distributed load that is
                  applied to the clear length of the element, acting on
                  the global x, y, and z directions, in the direction of
                  the global axes.
      :type udl: nparr

      :returns: None


   .. py:method:: to_global() -> nparr

      Returns the quantity expressed in the global coordinate system



.. py:class:: LoadCase

   Load Case object.
   Load cases contain information related to the specified loads,
   mass, parent nodes and rigid diaphragm constraints, etc.
   Analysis objects can use multiple load cases.
   Load combination objects utilize load cases as well.

   .. py:attribute:: name
      :annotation: :str

      

   .. py:attribute:: parent_model
      :annotation: :osmg.model.Model

      

   .. py:attribute:: node_loads
      :annotation: :osmg.collections.Collection[int, PointLoadMass]

      

   .. py:attribute:: node_mass
      :annotation: :osmg.collections.Collection[int, PointLoadMass]

      

   .. py:attribute:: line_element_udl
      :annotation: :osmg.collections.Collection[int, LineElementUDL]

      

   .. py:attribute:: tributary_area_analysis
      :annotation: :osmg.collections.Collection[int, osmg.preprocessing.tributary_area_analysis.TributaryAreaAnaysis]

      

   .. py:attribute:: parent_nodes
      :annotation: :dict[int, osmg.ops.node.Node]

      

   .. py:method:: __post_init__()


   .. py:method:: rigid_diaphragms(level_uids: list[int], gather_mass: bool = False) -> None

      Processes the geometry of the given levels and applies rigid
      diaphragm constraints


   .. py:method:: number_of_free_dofs()

      Calculates the number of free DOFS of the model, considering
      all (potentially) defined constraints, restraints and parent
      nodes.


   .. py:method:: __repr__()

      Return repr(self).



