{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "793e7209",
   "metadata": {
    "cell_marker": "\"\"\""
   },
   "source": [
    "# Defining a Model\n",
    "\n",
    "This section demonstrates the model definition process.\n",
    "\n",
    "## Model Definition Overview\n",
    "\n",
    "The overall procedure for defining the elements of a model can be\n",
    "broken down into the following steps:\n",
    "\n",
    "- Set active levels\n",
    "\n",
    "- Define components\n",
    "\n",
    "- Execute pre-processing methods\n",
    "\n",
    "The model can be visualized at any step in the process to confirm its validity.\n",
    "\n",
    "**To see all the available arguments of each of the following methods,\n",
    "please read the API reference or their docstrings**.\n",
    "\n",
    "Alternatively, use the `help()` function inside a python shell.\n",
    "e.g. `help(mdl.add_level)`\n",
    "\n",
    "You can also use `pydoc <osmg.name_of_module>` in a terminal window."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b80b697",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# imports\n",
    "import numpy as np\n",
    "from osmg import model\n",
    "import osmg.defaults as defaults\n",
    "from osmg.gen.section_gen import SectionGenerator\n",
    "from osmg.ops.section import ElasticSection\n",
    "from osmg.gen.component_gen import BeamColumnGenerator\n",
    "from osmg.ops.element import ElasticBeamColumn\n",
    "from osmg.graphics.preprocessing_3d import show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee885884",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# Instantiate a model\n",
    "mdl = model.Model('example_model')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3650f354",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "help(mdl.add_level)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8764c3b4",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# Define levels\n",
    "for i in range(3):\n",
    "    mdl.add_level(i, 144.00*(i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "20bb234a",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "defaults.load_default_steel(mdl)\n",
    "steel_phys_mat = mdl.physical_materials.retrieve_by_attr(\n",
    "    'name', 'default steel')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "223b166a",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# define line element sections\n",
    "secg = SectionGenerator(mdl)\n",
    "secg.load_aisc_from_database(\n",
    "    'W',\n",
    "    [\"W24X94\"],\n",
    "    'default steel',\n",
    "    'default steel',\n",
    "    ElasticSection)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "20eb70a3",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# set active levels\n",
    "mdl.levels.set_active([1, 2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e98df81",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "p1 = np.array((0.00, 0.00))\n",
    "p2 = np.array((360., 0.00))\n",
    "p3 = np.array((360., 360.))\n",
    "p4 = np.array((0.00, 360.00))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a26f479",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "mcg = BeamColumnGenerator(mdl)\n",
    "sec = mdl.elastic_sections.retrieve_by_attr('name', 'W24X94')\n",
    "for pt in [p1, p2, p3, p4]:\n",
    "    mcg.add_vertical_active(\n",
    "        x_coord=pt[0], y_coord=pt[1],\n",
    "        offset_i=np.zeros(3), offset_j=np.zeros(3),\n",
    "        transf_type='Corotational',\n",
    "        n_sub=4,\n",
    "        section=sec,\n",
    "        element_type=ElasticBeamColumn,\n",
    "        placement='centroid',\n",
    "        angle=0.00)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "befd482e",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "for pair in ((p1, p2), (p2, p3), (p3, p4), (p4, p1)):\n",
    "    mcg.add_horizontal_active(\n",
    "        xi_coord=pair[0][0],\n",
    "        yi_coord=pair[0][1],\n",
    "        xj_coord=pair[1][0],\n",
    "        yj_coord=pair[1][1],\n",
    "        offset_i=np.zeros(3),\n",
    "        offset_j=np.zeros(3),\n",
    "        snap_i='centroid',\n",
    "        snap_j='centroid',\n",
    "        transf_type='Linear',\n",
    "        n_sub=4,\n",
    "        section=sec,\n",
    "        element_type=ElasticBeamColumn,\n",
    "        placement='top_center',\n",
    "        angle=0.00)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "336a3002",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "show(mdl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e125b2b5",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# fixing the base\n",
    "for node in mdl.levels[0].nodes.values():\n",
    "    node.restraint = [True, True, True, False, False, False]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9464edb9",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "show(mdl)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50179904",
   "metadata": {
    "cell_marker": "\"\"\""
   },
   "source": [
    "## Preprocessing"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02ef3c01",
   "metadata": {
    "cell_marker": "\"\"\"",
    "lines_to_next_cell": 2
   },
   "source": [
    "Now that all the intended elements have been defined, we can apply\n",
    "pre-processing methods to the model.\n",
    "\n",
    "Some common methods are the following:\n",
    "\n",
    "* `rigid_diaphragms` assigns rigid diaphragm constraints to all\n",
    "  specified levels. Only primary nodes are affected (not internal\n",
    "  nodes of component assemblies).\n",
    "\n",
    "* `self_weight`, `self_mass` assign self-weight loads and lumped\n",
    "  self-mass to all the elements / nodes.\n",
    "\n",
    "Loads, mass, and diaphragm constraints are load_case-specific."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70bf7a18",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# imports\n",
    "from osmg.load_case import LoadCase\n",
    "from osmg.preprocessing.self_weight_mass import self_weight\n",
    "from osmg.preprocessing.self_weight_mass import self_mass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8db944d6",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "testcase = LoadCase('test', mdl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d4b1d12",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "self_weight(mdl, testcase)\n",
    "self_mass(mdl, testcase)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6750506d",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "testcase.rigid_diaphragms([1, 2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6b6c9bdb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# visualize the model\n",
    "show(mdl, testcase, extrude=True)"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_markers": "\"\"\""
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
