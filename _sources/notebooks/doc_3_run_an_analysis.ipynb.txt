{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fc01ea82",
   "metadata": {
    "cell_marker": "\"\"\""
   },
   "source": [
    "# Running an analysis\n",
    "\n",
    "The `solver` module is used to interact with OpenSees.\n",
    "\n",
    "The most convenient approach is using a child of the `Analysis` class\n",
    "from those already defined in the `solver` module for the specific\n",
    "analysis that is needed. This will run the analysis and store the\n",
    "requested results of each analysis step.\n",
    "\n",
    "Alternatively, a generic `Analysis` object can be defined (from the\n",
    "parent class), and its generic methods for model definition can be\n",
    "used together with OpenSees commands issued directly in the analysis\n",
    "script. If such an analysis is repeated a lot, a new `Analysis` child\n",
    "class can be defined in the `solver` module."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7cffdc3",
   "metadata": {
    "cell_marker": "\"\"\"",
    "lines_to_next_cell": 2
   },
   "source": [
    "## Analysis examples\n",
    "\n",
    "First we define a model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0d2d46f",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# This cell defines the model from notebook 2_Define_a_Model\n",
    "import numpy as np\n",
    "from osmg import model\n",
    "import osmg.defaults as defaults\n",
    "from osmg.gen.section_gen import SectionGenerator\n",
    "from osmg.ops.section import ElasticSection\n",
    "from osmg.gen.component_gen import BeamColumnGenerator\n",
    "from osmg.ops.element import ElasticBeamColumn\n",
    "from osmg.gen.zerolength_gen import gravity_shear_tab\n",
    "from osmg.load_case import LoadCase\n",
    "from osmg.preprocessing.self_weight_mass import self_weight\n",
    "from osmg.preprocessing.self_weight_mass import self_mass\n",
    "from osmg.graphics.preprocessing_3d import show\n",
    "mdl = model.Model('example_model')\n",
    "for i in range(3):\n",
    "    mdl.add_level(i, 144.00*(i))\n",
    "defaults.load_default_steel(mdl)\n",
    "defaults.load_default_fix_release(mdl)\n",
    "defaults.load_util_rigid_elastic(mdl)\n",
    "steel_phys_mat = mdl.physical_materials.retrieve_by_attr(\n",
    "    'name', 'default steel')\n",
    "secg = SectionGenerator(mdl)\n",
    "secg.load_aisc_from_database(\n",
    "    'W',\n",
    "    [\"W24X94\"],\n",
    "    'default steel',\n",
    "    'default steel',\n",
    "    ElasticSection)\n",
    "mdl.levels.set_active([1, 2])\n",
    "p1 = np.array((0.00, 0.00))\n",
    "p2 = np.array((360., 0.00))\n",
    "p3 = np.array((360., 360.))\n",
    "p4 = np.array((0.00, 360.00))\n",
    "mcg = BeamColumnGenerator(mdl)\n",
    "sec = mdl.elastic_sections.retrieve_by_attr('name', 'W24X94')\n",
    "for pt in [p1, p2, p3, p4]:\n",
    "    mcg.add_pz_active(\n",
    "        pt[0], pt[1],\n",
    "        sec,\n",
    "        steel_phys_mat,\n",
    "        0.00,\n",
    "        24.00,\n",
    "        24.00,\n",
    "        \"steel_w_col_pz_updated\",\n",
    "        {'pz_doubler_plate_thickness': 0.00,\n",
    "         'axial_load_ratio': 0.00,\n",
    "         'slab_depth': 0.00,\n",
    "         'consider_composite': False,\n",
    "         'location': 'interior',\n",
    "         'only_elastic': False,\n",
    "         'moment_modifier': 1.00,\n",
    "        })\n",
    "    mcg.add_vertical_active(\n",
    "        x_coord=pt[0], y_coord=pt[1],\n",
    "        offset_i=np.zeros(3), offset_j=np.zeros(3),\n",
    "        transf_type='Corotational',\n",
    "        n_sub=1,\n",
    "        section=sec,\n",
    "        element_type=ElasticBeamColumn,\n",
    "        placement='centroid',\n",
    "        angle=0.00)\n",
    "snap_i_list = ['centroid', 'middle_front', 'centroid', 'middle_back']\n",
    "snap_j_list = ['centroid', 'middle_back', 'centroid', 'middle_front']\n",
    "for i, pair in enumerate([(p1, p2), (p2, p3), (p3, p4), (p4, p1)]):\n",
    "    mcg.add_horizontal_active(\n",
    "        xi_coord=pair[0][0],\n",
    "        yi_coord=pair[0][1],\n",
    "        xj_coord=pair[1][0],\n",
    "        yj_coord=pair[1][1],\n",
    "        offset_i=np.zeros(3),\n",
    "        offset_j=np.zeros(3),\n",
    "        snap_i=snap_i_list[i],\n",
    "        snap_j=snap_j_list[i],\n",
    "        transf_type='Linear',\n",
    "        n_sub=4,\n",
    "        section=sec,\n",
    "        element_type=ElasticBeamColumn,\n",
    "        placement='top_center',\n",
    "        angle=0.00,\n",
    "        method='generate_hinged_component_assembly',\n",
    "        additional_args={\n",
    "            'n_x': None,\n",
    "            'n_y': None,\n",
    "            'zerolength_gen_i': gravity_shear_tab,\n",
    "            'zerolength_gen_args_i': {\n",
    "                'consider_composite': True,\n",
    "                'section': sec,\n",
    "                'physical_material': steel_phys_mat,\n",
    "                'distance': 10.00,\n",
    "                'n_sub': 2\n",
    "            },\n",
    "            'zerolength_gen_j': gravity_shear_tab,\n",
    "            'zerolength_gen_args_j': {\n",
    "                'consider_composite': True,\n",
    "                'section': sec,\n",
    "                'physical_material': steel_phys_mat,\n",
    "                'distance': 10.00,\n",
    "                'n_sub': 2\n",
    "            }\n",
    "        }\n",
    "    )\n",
    "for node in mdl.levels[0].nodes.values():\n",
    "    node.restraint = [True]*6\n",
    "testcase = LoadCase('test', mdl)\n",
    "self_weight(mdl, testcase)\n",
    "self_mass(mdl, testcase)\n",
    "testcase.rigid_diaphragms([1, 2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4bf2912d",
   "metadata": {},
   "outputs": [],
   "source": [
    "show(mdl, testcase, extrude=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "367262fe",
   "metadata": {
    "cell_marker": "\"\"\""
   },
   "source": [
    "### Static Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0da7234",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from osmg import solver"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a65809cb",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# instantiate analysis object\n",
    "static_anl = solver.StaticAnalysis(mdl, {testcase.name: testcase})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab2c506b",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "static_anl.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "954905b4",
   "metadata": {
    "cell_marker": "\"\"\""
   },
   "source": [
    "#### Retrieving results\n",
    "\n",
    "Analysis results are stored in dictionaries. The keys are the unique\n",
    "identifiers of the elements that the results correspond to, and the\n",
    "values contain the results."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9c30b6e",
   "metadata": {
    "cell_marker": "\"\"\""
   },
   "source": [
    "\n",
    "Show all node displacement results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a1c85886",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# DANGER: Don't do this for a large model.\n",
    "static_anl.results[testcase.name].node_displacements.items()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b543fdb4",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "# Displacement of the parent node of the top story,\n",
    "# in the Y direction.\n",
    "analysis_step = 0\n",
    "direction = 1\n",
    "node_id = testcase.parent_nodes[2].uid\n",
    "static_anl.results[testcase.name].node_displacements[\n",
    "    node_id][analysis_step][direction]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d209dd4",
   "metadata": {
    "cell_marker": "\"\"\""
   },
   "source": [
    "\n",
    "Note: Multiple load cases and analysis objects can be defined using\n",
    "the same model. The results will be stored independently in the\n",
    "various analysis objects."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de0a46d4",
   "metadata": {
    "cell_marker": "\"\"\""
   },
   "source": [
    "#### Visualizing results\n",
    "\n",
    "The following visualization methods work for all analysis\n",
    "methods. However, some require specifying the analysis step to\n",
    "visualize. Static analyses only have a single step, so we specify 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e8bef046",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from osmg.graphics.postprocessing_3d import show_deformed_shape\n",
    "from osmg.graphics.postprocessing_3d import show_basic_forces"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3ba60ad",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "help(show_deformed_shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "58ca9faa",
   "metadata": {},
   "outputs": [],
   "source": [
    "show_deformed_shape(static_anl, testcase.name, 0, 0.00, False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4f15f42",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "help(show_basic_forces)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "abd61ffd",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "show_basic_forces(\n",
    "    static_anl, testcase.name, 0,\n",
    "    1.00, 1.00, 1.00, 1.00, 1.00,\n",
    "    10, 1.00, 1.00, False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8603f48",
   "metadata": {
    "cell_marker": "\"\"\""
   },
   "source": [
    "### Modal Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0217fa14",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "modalcase = LoadCase('modal', mdl)\n",
    "self_mass(mdl, modalcase)\n",
    "modalcase.rigid_diaphragms([1, 2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b209db15",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "modal_analysis = solver.ModalAnalysis(\n",
    "    mdl, {modalcase.name: modalcase}, num_modes=4)\n",
    "modal_analysis.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f4848a9",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "print(modal_analysis.results[modalcase.name].periods)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a820e012",
   "metadata": {
    "cell_marker": "\"\"\"",
    "lines_to_next_cell": 2
   },
   "source": [
    "for modal analyses, step corresponds to mode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "803e71ff",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "show_deformed_shape(\n",
    "    modal_analysis, modalcase.name, 3, 0.00,\n",
    "    extrude=False, animation=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "449cbba6",
   "metadata": {
    "cell_marker": "\"\"\""
   },
   "source": [
    "### Time-history analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4131d397",
   "metadata": {},
   "outputs": [],
   "source": [
    "nlth_anl = solver.THAnalysis(mdl, {testcase.name: testcase})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03d705b0",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "help(nlth_anl.run)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1b5e03b9",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "ag_x = np.genfromtxt('groundmotions/1xa.txt')\n",
    "ag_y = np.genfromtxt('groundmotions/1ya.txt')\n",
    "\n",
    "nlth_anl.run(\n",
    "    0.01,\n",
    "    ag_x, ag_y, None,\n",
    "    0.005,\n",
    "    damping={'type': 'rayleigh', 'ratio': 0.05, 'periods': [1.00, 0.30]},\n",
    "    print_progress=False\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c4479087",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "parent_node_lvl2 = testcase.parent_nodes[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "79bd94ea",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "nlth_anl.plot_node_displacement_history(\n",
    "    testcase.name, parent_node_lvl2, 0, plotly=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5fec0a4",
   "metadata": {
    "cell_marker": "\"\"\""
   },
   "source": [
    "### Other types of structural analysis and ideas for future development\n",
    "\n",
    "- Currently it is unclear what the intent of each model is (i.e. a\n",
    "  linear model used for design or an advanced model used for\n",
    "  performance evaluation purposes). There is already support for\n",
    "  design-related analyses, such as modal response spectrum analysis,\n",
    "  and definition of load combinations, which can support a design\n",
    "  workflow. Examples will be added in the future, and there are plans\n",
    "  to further enhance the capabilities of `osmg` for structural design.\n",
    "\n",
    "- Future plans include adding support for modal response history\n",
    "  analysis which can reduce computation time for linear models."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_markers": "\"\"\""
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
